---
import PorscheMacanSlide from './imgs/introSlider/PorscheMacanSlide.astro'
import PorscheCayenneSlide from './imgs/introSlider/PorscheCayenneSlide.astro'
import PorschePanameraSlide from './imgs/introSlider/PorschePanameraSlide.astro'
import Porsche911Slide from './imgs/introSlider/Porsche911Slide.astro'
---

<!-- 
  *** Changes slider ***
  -> Use CSS Scroll Snap to control the scroll
  -> implement a new algorithm for making it as same as -- porsche.com/mexico -- slider
 -->
<section
  id='intro-section-slider'
  class='h-auto relative flex flex-row group transition-all duration-500 ease-out'
>
  <div
    id='slider-container'
    class='slider__container w-full sm:h-auto relative overflow-hidden object-cover'
  >
    <!-- class for slider -->
    <!-- transition-transform translate-x-0 duration-[1.2s] -->
    <div
      id='slider'
      class='slider w-full min-h-[60dvh] flex ease-[cubic-bezier(0.445, 0.05, 0.55, 0.95)]'
      style=''
    >
      <!-- Slides -->
      <!-- <PorscheCayenneSlid -->
      <PorscheCayenneSlide />
      <!-- <PorschePanameraSlid -->
      <PorschePanameraSlide />
      <!-- <PorscheMacanSlid -->
      <PorscheMacanSlide />
      <!-- <Porsche911Slid -->
      <Porsche911Slide />
      <!-- images -->
    </div>
  </div>
  <!-- button left -->
  <div
    class='hidden arrowsLeft absolute z-50 top-0 left-0 w-20 h-full md:flex items-center justify-center'
  >
    <button
      id='button-left'
      class='bg-white text-gray-600 p-3 opacity-0 transition-all duration-500 delay-100 ease-in-out group-hover:opacity-100 group-hover:duration-200 hover:bg-red-600 hover:text-white'
    >
      <svg
        xmlns='http://www.w3.org/2000/svg'
        fill='none'
        viewBox='0 0 24 24'
        stroke-width='1.5'
        stroke='currentColor'
        class='w-6 h-6'
      >
        <path
          stroke-linecap='round'
          stroke-linejoin='round'
          d='M15.75 19.5L8.25 12l7.5-7.5'></path>
      </svg>
    </button>
  </div>
  <!-- button right -->
  <div
    class='hidden arrowsRight absolute z-50 top-0 right-0 w-20 h-full md:flex items-center justify-center'
  >
    <button
      id='button-right'
      class='bg-white text-gray-600 p-3 opacity-0 transition-all duration-500 delay-100 ease-in-out group-hover:opacity-100 group-hover:duration-200 hover:bg-red-600 hover:text-white'
    >
      <svg
        xmlns='http://www.w3.org/2000/svg'
        fill='none'
        viewBox='0 0 24 24'
        stroke-width='1.5'
        stroke='currentColor'
        class='w-6 h-6'
      >
        <path
          stroke-linecap='round'
          stroke-linejoin='round'
          d='M8.25 4.5l7.5 7.5-7.5 7.5'></path>
      </svg>
    </button>
  </div>
  <!-- 4 dots -->
  <div class='animated_dots w-full h-10 absolute bottom-0 left-0'>
    <div class='w-full h-full relative flex justify-center items-center gap-4'>
      <span
        data-dot-number='1'
        class='animated-dot w-2 h-2 rounded-full bg-gray-300'></span>
      <span
        data-dot-number='2'
        class='animated-dot w-2 h-2 rounded-full bg-gray-300'></span>
      <span
        data-dot-number='3'
        class='animated-dot w-2 h-2 rounded-full bg-gray-300'></span>
      <span
        data-dot-number='4'
        class='animated-dot w-2 h-2 rounded-full bg-gray-300'></span>
    </div>
  </div>
</section>
<script>
  // const sectionSlider = document.querySelector('#intro-section-slider')

  const sliderContainer = document.querySelector('#slider-container')
  const slider = document.getElementById('slider')
  const sliderElement = document.querySelectorAll('.sliders')
  const animatedDot = document.querySelectorAll('.animated-dot')
  const buttonLeft = document.getElementById('button-left')
  const buttonRight = document.getElementById('button-right')

  let slideCounter = 0
  let isInTransition = false

  const DIRECTION = {
    RIGHT: 'RIGHT',
    LEFT: 'LEFT'
  }

  const getTransformValue = () => {
    return Number(
      slider
        .getAttribute('style')
        .replace('transform: translateX(', '')
        .replace('px);', '')
    )
  }

  // const updateScroll = (transformedValue) => {
  //   slider.setAttribute(
  //     'style',
  //     `transform: translateX(${transformedValue + 1}px);`
  //   )
  // }

  const reorderSlide = () => {
    const transformedValue = getTransformValue()
    slider.classList.remove('transition-transform')
    slider.classList.remove('duration-[1.2s]')
    if (slideCounter === sliderElement.length - 1) {
      slider.appendChild(slider.firstElementChild)
      slider.setAttribute(
        'style',
        `transform: translateX(${
          transformedValue + sliderElement[slideCounter].clientWidth
        }px);`
      )
      slideCounter--
    } else if (slideCounter === 0) {
      slider.prepend(slider.lastElementChild)
      slider.setAttribute(
        'style',
        `transform: translateX(${
          transformedValue - sliderElement[slideCounter].clientWidth
        }px);`
      )
      slideCounter++
    }
    isInTransition = false
  }

  // function executed by clicking buttons
  const moveSlide = (direction) => {
    if (isInTransition) return
    const transformedValue = getTransformValue()
    slider.classList.add('transition-transform')
    slider.classList.add('duration-[1.2s]')
    isInTransition = true
    if (direction === DIRECTION.LEFT) {
      // console.dir(slider.firstElementChild)
      slider.setAttribute(
        'style',
        `transform: translateX(${
          transformedValue + sliderElement[slideCounter].clientWidth
        }px);`
      )
      slideCounter--
    } else if (direction === DIRECTION.RIGHT) {
      slider.setAttribute(
        'style',
        `transform: translateX(${
          transformedValue - sliderElement[slideCounter].clientWidth
        }px);`
      )
      slideCounter++
    }
    isInTransition = false
  }

  // Change Slider each 10 seconds
  // setInterval(() => {
  //   moveSlide(DIRECTION.RIGHT)
  // }, 2000)

  // Change Slider by clicking buttons (left, right)
  buttonLeft.addEventListener('click', () => moveSlide(DIRECTION.LEFT))
  buttonRight.addEventListener('click', () => moveSlide(DIRECTION.RIGHT))

  let startGrabing
  let endGrabind
  let position = getTransformValue()
  let scrolled
  let recorrido = []
  const guardarRecorrido = (scrollWidth) => {
    recorrido.push(scrollWidth)
  }

  slider.addEventListener('touchstart', function (e) {
    startGrabing = e.touches[0].clientX
  })

  slider.addEventListener('touchmove', function (e) {
    if (isInTransition) return
    const transformedValue = getTransformValue()
    slider.classList.add('transition-transform')
    slider.classList.add('duration-[1.2s]')
    isInTransition = true

    // console.log(endGrabind)
    if (endGrabind === undefined) {
      endGrabind = 0
    }
    const scrollWidth = e.touches[0].clientX
    const clientWidth = slider.clientWidth

    let scrollingPx = startGrabing - scrollWidth

    let moviendo = transformedValue + scrollingPx + clientWidth

    const newMov = (transformedValue, moviendo) => {
      return transformedValue - moviendo
    }

    slider.setAttribute(
      'style',
      `transform: translateX(${
        endGrabind + newMov(transformedValue, moviendo)
      }px);`
    )
    isInTransition = false

    // console.log(transformedValue)
    // console.log(scrollWidth)

    guardarRecorrido(scrollWidth)

    scrolled = Number(transformedValue)
  })

  slider.addEventListener('touchend', function (e) {
    let transformedValue = getTransformValue()
    slider.classList.add('transition-transform')
    slider.classList.add('duration-[1.2s]')
    endGrabind = transformedValue

    // startStyleTranslated - clientWidth || startStyleTranslated + clientWidth
    // ----------------------------------------
    let scrolling = slider.clientWidth + endGrabind
    for (let i = 0; i < recorrido.length; i++) {
      if (recorrido[i] < recorrido[i + 1]) {
        slider.setAttribute(
          'style',
          `transform: translateX(${
            scrolled - scrolling + slider.clientWidth
          }px);`
        )
        console.log('izquierda')
      } else if (recorrido[i] > recorrido[i + 1]) {
        slider.setAttribute(
          'style',
          `transform: translateX(${
            scrolled - scrolling - slider.clientWidth
          }px);`
        )
        console.log('derecha')
      }
    }
    transformedValue = getTransformValue()
    scrolled = Number(transformedValue)
    console.log('scrolled:', scrolled)
    console.log('1-transforme:', transformedValue)
    console.log('2-transforme:', slider.getAttribute('style'))
    // ----------------------------------------

    recorrido = []

    // reorderSlide()
  })

  slider.addEventListener('transitionend', reorderSlide)

  // <- Todo: create function
  // slider.addEventListener('transitionstart', changeDotsColors)

  // Intersection Observer - start code here -
  // -> To change dots color

  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.2
  }

  const observer = new IntersectionObserver((entries) => {
    // let transformedValue = getTransformValue()

    entries.forEach((entry) => {
      const slide = entry.target
      const intro_image_number = slide.getAttribute(
        'data-intro-slider-image-number'
      )
      const { isIntersecting } = entry
      if (isIntersecting) {
        // ajust slide
        // console.log(slider.scrollWidth / 4)}
        // console.dir(transformedValue)
        // console.dir(transformedValue - endTouchValue)

        // animation 4 dots
        animatedDot.forEach((el) => {
          const dotOn = el.getAttribute('data-dot-number')
          if (dotOn === intro_image_number) {
            el.classList.remove('bg-gray-300')
            el.classList.add('bg-red-600')
          } else {
            el.classList.remove('bg-red-600')
            el.classList.add('bg-gray-300')
          }
        })
      }
    })
  }, observerOptions)

  sliderElement.forEach((section) => observer.observe(section))

  // agrega nodos al cargar la página por primera vez
  reorderSlide()
</script>
